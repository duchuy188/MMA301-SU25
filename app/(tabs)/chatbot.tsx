import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Image,
  StatusBar,
  SafeAreaView,
  Animated as RNAnimated,
  Alert,
  ScrollView,
} from 'react-native';
import { Send, Bot, PlusCircle, Monitor, Ticket, Gift, Film, MapPin, Calendar, Star, Info } from 'lucide-react-native';
import { getGeminiResponse } from '../../services/gemini';
import { router } from 'expo-router';
import { Movie, getPublicMovies } from '../../services/movie';
import { Promotion, getActivePromotions } from '../../services/promotion';
import { Theater, getTheaters } from '../../services/theater';
import { getPublicScreenings } from '../../services/screening';
import Animated, { FadeInLeft, FadeInRight } from 'react-native-reanimated';

// Add shuffle function
const shuffleArray = <T,>(array: T[]): T[] => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho tin nh·∫Øn
type Message = {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  mentionedMovies?: Movie[];
  mentionedPromotions?: Promotion[];
  mentionedTheaters?: Theater[];
  mentionedScreenings?: any[]; // Th√™m m·∫£ng l·ªãch chi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
  showSeatAdvice?: boolean; // Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u tin nh·∫Øn c√≥ ch·ª©a t∆∞ v·∫•n gh·∫ø
};

// Th√™m import cho c√°c h√¨nh ·∫£nh r·∫°p
const nguyen_van_qua = require('../../assets/images/theater/Nguy·ªÖn VƒÉn Qu√°.jpg');
const truong_chinh = require('../../assets/images/theater/Tr∆∞·ªùng Chinh.jpg');
const huynh_tan_phat = require('../../assets/images/theater/Hu·ª≥nh T·∫•n Ph√°t.jpg');
const trung_chanh = require('../../assets/images/theater/Trung Ch√°nh.jpg');
const nguyen_du = require('../../assets/images/theater/Nguy·ªÖn Du.jpg');
const thiso_mall = require('../../assets/images/theater/Thiso Mall.webp');

// Th√™m v√†o ph·∫ßn khai b√°o ki·ªÉu d·ªØ li·ªáu
type QuickReply = {
  text: string;
  onPress: () => void;
  icon?: React.ReactNode;
};

export default function ChatbotScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Xin ch√†o! T√¥i l√† Galaxy AI, tr·ª£ l√Ω ·∫£o c·ªßa Galaxy Cinema. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const flatListRef = useRef<FlatList>(null);
  const fadeAnim = useRef(new RNAnimated.Value(0)).current;
  // Thay ƒë·ªïi kh·ªüi t·∫°o ban ƒë·∫ßu
  const [quickReplies, setQuickReplies] = useState<QuickReply[]>([
    { text: 'Phim ƒëang chi·∫øu', onPress: () => handleQuickReply('Phim ƒëang chi·∫øu'), icon: <Film size={14} color="#FFD700" /> },
    { text: 'Phim s·∫Øp chi·∫øu', onPress: () => handleQuickReply('Phim s·∫Øp chi·∫øu'), icon: <Calendar size={14} color="#FFD700" /> },
    { text: 'R·∫°p chi·∫øu', onPress: () => handleQuickReply('R·∫°p Galaxy Cinema'), icon: <MapPin size={14} color="#FFD700" /> },
    { text: 'Khuy·∫øn m√£i', onPress: () => handleQuickReply('Khuy·∫øn m√£i hi·ªán c√≥'), icon: <Gift size={14} color="#FFD700" /> },
    { text: 'L·ªãch chi·∫øu', onPress: () => handleQuickReply('L·ªãch chi·∫øu h√¥m nay'), icon: <Calendar size={14} color="#FFD700" /> },
    { text: 'T∆∞ v·∫•n gh·∫ø', onPress: () => handleQuickReply('T∆∞ v·∫•n ch·ªçn gh·∫ø t·ªët nh·∫•t'), icon: <Info size={14} color="#FFD700" /> },
  ]);
  
  // Hi·ªáu ·ª©ng fade in cho header
  useEffect(() => {
    RNAnimated.timing(fadeAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start();
  }, []);

  // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messages.length > 0) {
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 200);
    }
  }, [messages]);

  // X√≥a ho√†n to√†n useEffect n√†y v√¨ b·∫°n ƒë√£ kh·ªüi t·∫°o quickReplies v·ªõi icon ·ªü tr√™n
  // HO·∫∂C s·ª≠a th√†nh:
  useEffect(() => {
    // Th√™m t√πy ch·ªçn "T∆∞ v·∫•n gh·∫ø ng·ªìi" v√†o danh s√°ch quick replies
    setQuickReplies([
      { text: 'Phim ƒëang chi·∫øu', onPress: () => handleQuickReply('Phim ƒëang chi·∫øu'), icon: <Film size={14} color="#FFD700" /> },
      { text: 'Phim s·∫Øp chi·∫øu', onPress: () => handleQuickReply('Phim s·∫Øp chi·∫øu'), icon: <Calendar size={14} color="#FFD700" /> },
      { text: 'R·∫°p chi·∫øu', onPress: () => handleQuickReply('R·∫°p Galaxy Cinema'), icon: <MapPin size={14} color="#FFD700" /> },
      { text: 'Khuy·∫øn m√£i', onPress: () => handleQuickReply('Khuy·∫øn m√£i hi·ªán c√≥'), icon: <Gift size={14} color="#FFD700" /> },
      { text: 'L·ªãch chi·∫øu', onPress: () => handleQuickReply('L·ªãch chi·∫øu h√¥m nay'), icon: <Calendar size={14} color="#FFD700" /> },
      { text: 'T∆∞ v·∫•n gh·∫ø', onPress: () => handleQuickReply('T∆∞ v·∫•n ch·ªçn gh·∫ø t·ªët nh·∫•t'), icon: <Info size={14} color="#FFD700" /> },
    ]);
  }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  // Nh√≥m tin nh·∫Øn theo ng√†y
  const groupMessagesByDate = () => {
    const groups: { title: string, data: Message[], id: string }[] = [];
    const messagesByDate: { [key: string]: Message[] } = {};
    
    messages.forEach(message => {
      const date = new Date(message.timestamp);
      const dateStr = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
      
      if (!messagesByDate[dateStr]) {
        messagesByDate[dateStr] = [];
      }
      
      messagesByDate[dateStr].push(message);
    });
    
    // Chuy·ªÉn ƒë·ªïi object th√†nh array ƒë·ªÉ render
    Object.keys(messagesByDate).forEach(dateStr => {
      groups.push({
        title: dateStr,
        data: messagesByDate[dateStr],
        id: dateStr
      });
    });
    
    return groups;
  };

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSend = async () => {
    if (inputText.trim() === '') return;

    // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    try {
      // L·∫•y danh s√°ch phim, khuy·∫øn m√£i, r·∫°p chi·∫øu v√† l·ªãch chi·∫øu
      const [movies, promotionsResponse, theaters, screenings] = await Promise.all([
        getPublicMovies(),
        getActivePromotions(),
        getTheaters(),
        getPublicScreenings()
      ]);
      
      const promotions = promotionsResponse.data || [];
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ khuy·∫øn m√£i kh√¥ng
      const isAskingAboutPromotions = [
        'khuy·∫øn m√£i', 'm√£ gi·∫£m gi√°', 'voucher', 'coupon', '∆∞u ƒë√£i', 'gi·∫£m gi√°', 
        'm√£', 'code', 'khuy·∫øn m·∫°i', 'khuy·∫øn m·∫°i n√†o', 'khuy·∫øn m√£i n√†o'
      ].some(keyword => inputText.toLowerCase().includes(keyword.toLowerCase()));

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ l·ªãch chi·∫øu kh√¥ng
      const isAskingAboutSchedules = inputText.toLowerCase().includes('l·ªãch chi·∫øu') || 
                                    inputText.toLowerCase().includes('gi·ªù chi·∫øu') ||
                                    inputText.toLowerCase().includes('su·∫•t chi·∫øu');

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ t∆∞ v·∫•n gh·∫ø ng·ªìi kh√¥ng
      const isAskingAboutSeats = 
        inputText.toLowerCase().includes('t∆∞ v·∫•n ch·ªçn gh·∫ø') || 
        inputText.toLowerCase().includes('gh·∫ø t·ªët nh·∫•t') ||
        inputText.toLowerCase().includes('ch·ªó ng·ªìi') ||
        inputText.toLowerCase().includes('v·ªã tr√≠ ng·ªìi') ||
        inputText.toLowerCase().includes('n√™n ng·ªìi ƒë√¢u') ||
        inputText.toLowerCase().includes('gh·∫ø n√†o ƒë·∫πp');

      // N·∫øu ng∆∞·ªùi d√πng ch·ªâ ƒëang h·ªèi v·ªÅ khuy·∫øn m√£i
      if (isAskingAboutPromotions) {
        try {
          // T·∫°o tin nh·∫Øn hi·ªÉn th·ªã t·∫•t c·∫£ khuy·∫øn m√£i hi·ªán c√≥
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
            text: "ƒê√¢y l√† c√°c khuy·∫øn m√£i hi·ªán c√≥ t·∫°i Galaxy Cinema üéÅ‚ú®",
        isUser: false,
        timestamp: new Date(),
            mentionedPromotions: promotions // Hi·ªÉn th·ªã t·∫•t c·∫£ khuy·∫øn m√£i t·ª´ API
      };

      setMessages((prev) => [...prev, botMessage]);
      setIsTyping(false);
          return; // Th√™m return ƒë·ªÉ tr√°nh ti·∫øp t·ª•c x·ª≠ l√Ω
        } catch (error) {
          console.error('Error fetching promotions:', error);
        }
      }
      
      // Th√™m ki·ªÉm tra trong h√†m handleSend
      const isAskingAboutAllTheaters = 
        inputText.toLowerCase() === 'r·∫°p' || 
        inputText.toLowerCase() === 'r·∫°p galaxy cinema' ||
        inputText.toLowerCase() === 'galaxy cinema' ||
        inputText.toLowerCase() === 'c√°c r·∫°p' ||
        inputText.toLowerCase() === 'danh s√°ch r·∫°p';

      const isAskingAboutSpecificTheater = 
        inputText.toLowerCase().includes('r·∫°p') && 
        (inputText.toLowerCase().includes('qu·∫≠n') || 
         inputText.toLowerCase().includes('huy·ªán') ||
         inputText.toLowerCase().includes('th√†nh ph·ªë') ||
         inputText.toLowerCase().includes('tp') ||
         inputText.toLowerCase().includes('ƒë∆∞·ªùng') ||
         inputText.toLowerCase().includes('g·∫ßn') ||
         inputText.toLowerCase().includes('·ªü ƒë√¢u'));

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ t∆∞ v·∫•n gh·∫ø ng·ªìi kh√¥ng
      if (isAskingAboutSeats) {
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: "M√¨nh s·∫Ω t∆∞ v·∫•n cho b·∫°n v·ªÅ v·ªã tr√≠ gh·∫ø ng·ªìi t·ªët nh·∫•t t·∫°i Galaxy Cinema nh√©! üçøüé¨\n\n" +
                "üëë Gh·∫ø gi·ªØa r·∫°p (h√†ng F-G, c·ªôt 3-6): T·∫ßm nh√¨n t·ªët nh·∫•t, tr·∫£i nghi·ªám √¢m thanh c√¢n b·∫±ng\n\n" +
                "‚ú® Gh·∫ø VIP (th∆∞·ªùng l√† h√†ng G-H): Tho·∫£i m√°i h∆°n, r·ªông h∆°n v√† c√≥ gi√° cao h∆°n\n\n" +
                "üö∂ Gh·∫ø cu·ªëi r·∫°p (h√†ng A-B): Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën d·ªÖ ra v√†o, nh∆∞ng ph·∫£i ng∆∞·ªõc l√™n xem\n\n" +
                "üé≠ Gh·∫ø ƒë·∫ßu r·∫°p (h√†ng J-K): Ph√π h·ª£p cho ng∆∞·ªùi th√≠ch nh√¨n m√†n h√¨nh l·ªõn, nh∆∞ng d·ªÖ m·ªèi c·ªï\n\n" +
                "üö™ Gh·∫ø c·∫°nh l·ªëi ƒëi (c·ªôt 1 ho·∫∑c 8): Thu·∫≠n ti·ªán cho vi·ªác ra v√†o nh∆∞ng t·∫ßm nh√¨n c√≥ th·ªÉ b·ªã l·ªách\n\n" +
                "B·∫°n ƒëi xem phim v·ªõi ai? M√¨nh s·∫Ω t∆∞ v·∫•n th√™m v·ªã tr√≠ ph√π h·ª£p nha! üòä",
          isUser: false,
          timestamp: new Date(),
          showSeatAdvice: true, // Th√™m flag ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫∑c bi·ªát n·∫øu c·∫ßn
        };
        
        setMessages((prev) => [...prev, botMessage]);
        setIsTyping(false);
        return; // Th√™m return ƒë·ªÉ tr√°nh ti·∫øp t·ª•c x·ª≠ l√Ω
      }

      // N·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ t·∫•t c·∫£ c√°c r·∫°p
      if (isAskingAboutAllTheaters) {
        // X√°o tr·ªôn danh s√°ch r·∫°p v√† hi·ªÉn th·ªã t·∫•t c·∫£ r·∫°p
        const randomTheaters = shuffleArray([...theaters]); // L·∫•y t·∫•t c·∫£ r·∫°p, ch·ªâ x√°o tr·ªôn th·ª© t·ª±
        
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: "ƒê√¢y l√† t·∫•t c·∫£ c√°c r·∫°p Galaxy Cinema üé¨üè¢",
          isUser: false,
          timestamp: new Date(),
          mentionedTheaters: randomTheaters
        };
        
        setMessages((prev) => [...prev, botMessage]);
        setIsTyping(false);
        return; // Th√™m return ƒë·ªÉ tr√°nh ti·∫øp t·ª•c x·ª≠ l√Ω
      }

      // N·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ r·∫°p ·ªü v·ªã tr√≠ c·ª• th·ªÉ, ƒë·ªÉ Gemini x·ª≠ l√Ω
      if (isAskingAboutSpecificTheater) {
        // Ti·∫øp t·ª•c x·ª≠ l√Ω b·∫±ng Gemini API
      }
      
      // G·ªçi API Gemini ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
      let response = await getGeminiResponse(inputText, messages);
      
      // Ph√°t hi·ªán phim, khuy·∫øn m√£i, r·∫°p v√† l·ªãch chi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong ph·∫£n h·ªìi
      const mentionedMovies = detectMoviesInResponse(response, movies);
      const mentionedPromotions = isAskingAboutPromotions ? promotions : [];
      const mentionedTheaters = detectTheatersInResponse(response, theaters);
      let mentionedScreenings: any[] = detectScreeningsInResponse(response, screenings, movies, theaters);
      
      // N·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ l·ªãch chi·∫øu, hi·ªÉn th·ªã c√°c su·∫•t chi·∫øu g·∫ßn nh·∫•t
      if (isAskingAboutSchedules) {
        // Hi·ªÉn th·ªã m·ªôt s·ªë l·ªãch chi·∫øu g·∫ßn nh·∫•t
        mentionedScreenings = screenings
          .filter(s => new Date(s.startTime) > new Date())
          .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime())
          .slice(0, 6);
          
        // L√†m phong ph√∫ d·ªØ li·ªáu su·∫•t chi·∫øu v·ªõi th√¥ng tin phim v√† r·∫°p
        for (const screening of mentionedScreenings) {
          if (!screening.movieTitle && screening.movieId) {
            try {
              const movieId = typeof screening.movieId === 'object' ? screening.movieId._id : screening.movieId;
              const movie = movies.find(m => m._id === movieId);
              if (movie) {
                screening.movieTitle = movie.title;
              }
            } catch (error) {
              screening.movieTitle = 'Phim ch∆∞a x√°c ƒë·ªãnh';
            }
          }
          
          if (!screening.theaterName && screening.theaterId) {
            try {
              const theaterId = typeof screening.theaterId === 'object' ? screening.theaterId._id : screening.theaterId;
              const theater = theaters.find(t => t._id === theaterId);
              if (theater) {
                screening.theaterName = theater.name;
              }
            } catch (error) {
              screening.theaterName = 'R·∫°p ch∆∞a x√°c ƒë·ªãnh';
            }
          }
        }
        
        // N·∫øu ƒëang h·ªèi tr·ª±c ti·∫øp v·ªÅ l·ªãch chi·∫øu, t·∫°o tin nh·∫Øn ri√™ng
        if (inputText.toLowerCase() === 'l·ªãch chi·∫øu' || inputText.toLowerCase() === 'l·ªãch chi·∫øu h√¥m nay') {
          const botMessage: Message = {
            id: (Date.now() + 1).toString(),
            text: "ƒê√¢y l√† l·ªãch chi·∫øu g·∫ßn nh·∫•t t·∫°i Galaxy Cinema üé¨üçø",
            isUser: false,
            timestamp: new Date(),
            mentionedScreenings: mentionedScreenings
          };
          
          setMessages((prev) => [...prev, botMessage]);
          setIsTyping(false);
          return; // Th√™m return ƒë·ªÉ tr√°nh ti·∫øp t·ª•c x·ª≠ l√Ω
        }
      }
      
      // Ki·ªÉm tra xem tin nh·∫Øn cu·ªëi c√πng c·ªßa bot c√≥ gi·ªëng tin nh·∫Øn hi·ªán t·∫°i kh√¥ng
      const lastBotMessage = messages.filter(msg => !msg.isUser).pop();
      if (lastBotMessage && lastBotMessage.text === response) {
        // N·∫øu gi·ªëng nhau, thay ƒë·ªïi ph·∫£n h·ªìi ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        if (response.includes('Vui l√≤ng ch·ªçn phim, r·∫°p v√† gh·∫ø tr∆∞·ªõc khi √°p d·ª•ng m√£ khuy·∫øn m√£i')) {
          // N·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ khuy·∫øn m√£i
          if (isAskingAboutPromotions) {
            response = "ƒê√¢y l√† c√°c khuy·∫øn m√£i hi·ªán c√≥ t·∫°i Galaxy Cinema. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt t·ª´ng khuy·∫øn m√£i b√™n d∆∞·ªõi.";
            // ƒê·∫£m b·∫£o mentionedPromotions s·∫Ω ƒë∆∞·ª£c g√°n v·ªõi t·∫•t c·∫£ khuy·∫øn m√£i
            const botMessage: Message = {
              id: (Date.now() + 1).toString(),
              text: response,
              isUser: false,
              timestamp: new Date(),
              mentionedPromotions: promotions
            };
            
            setMessages((prev) => [...prev, botMessage]);
            setIsTyping(false);
            return;
          } else {
            response = 'B·∫°n c·∫ßn ch·ªçn phim v√† r·∫°p tr∆∞·ªõc. M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n ch·ªçn phim kh√¥ng?';
          }
        } else {
          // Th√™m m·ªôt c√¢u m·ªü ƒë·∫ßu ƒë·ªÉ tr√°nh tr√πng l·∫∑p ho√†n to√†n
          response = `Nh∆∞ m√¨nh ƒë√£ ƒë·ªÅ c·∫≠p, ${response.toLowerCase()}`;
        }
      }
      
      // T·∫°o tin nh·∫Øn bot v·ªõi phim, khuy·∫øn m√£i, r·∫°p chi·∫øu v√† l·ªãch chi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
      const botMessage: Message = {
        id: `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`, // ID duy nh·∫•t h∆°n
        text: response,
        isUser: false,
        timestamp: new Date(),
        mentionedMovies: mentionedMovies.length > 0 ? mentionedMovies : undefined,
        mentionedPromotions: mentionedPromotions.length > 0 ? mentionedPromotions : undefined,
        mentionedTheaters: mentionedTheaters.length > 0 ? mentionedTheaters : undefined,
        mentionedScreenings: mentionedScreenings.length > 0 ? mentionedScreenings : undefined,
      };

      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      // X·ª≠ l√Ω l·ªói
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.",
        isUser: false,
        timestamp: new Date(),
      };
      
      setMessages((prev) => [...prev, errorMessage]);
      console.error('Error getting response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // H√†m ph√°t hi·ªán phim trong ph·∫£n h·ªìi
  const detectMoviesInResponse = (response: string, movies: Movie[]) => {
    const mentionedMovies: Movie[] = [];
    const mentionedMovieIds = new Set<string>();
    
    // Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ li√™n quan ƒë·∫øn phim kh√¥ng
    const movieRelatedKeywords = [
      'phim', 'movie', 'chi·∫øu', 'showing', 'xem phim', 'ƒëang chi·∫øu', 's·∫Øp chi·∫øu',
      'l·ªãch chi·∫øu', 'su·∫•t chi·∫øu', 'r·∫°p chi·∫øu', 'ƒë·∫∑t v√©'
    ];
    
    const isMovieRelated = movieRelatedKeywords.some(keyword => 
      response.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (!isMovieRelated) {
      return mentionedMovies;
    }
    
    // Ki·ªÉm tra t·ª´ng phim xem c√≥ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong ph·∫£n h·ªìi kh√¥ng
    movies.forEach(movie => {
      if (response.toLowerCase().includes(movie.title.toLowerCase()) && !mentionedMovieIds.has(movie._id)) {
        // Ki·ªÉm tra xem phim n√†y ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch ch∆∞a
        const isDuplicate = mentionedMovies.some(m => m._id === movie._id);
        if (!isDuplicate) {
          mentionedMovies.push(movie);
          mentionedMovieIds.add(movie._id);
        }
      }
    });
    
    return mentionedMovies;
  };

  // C·∫≠p nh·∫≠t h√†m ph√°t hi·ªán khuy·∫øn m√£i trong ph·∫£n h·ªìi
  const detectPromotionsInResponse = (response: string, promotions: Promotion[]) => {
    const mentionedPromotions: Promotion[] = [];
    
    // Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ li√™n quan ƒë·∫øn khuy·∫øn m√£i kh√¥ng
    const promotionRelatedKeywords = [
      'khuy·∫øn m√£i', 'gi·∫£m gi√°', '∆∞u ƒë√£i', 'm√£ gi·∫£m', 'voucher', 'coupon',
      'promotion', 'discount', 'offer', 'deal', 'sale', 'SUMMER', 'VNPAY'
    ];
    
    const isPromotionRelated = promotionRelatedKeywords.some(keyword => 
      response.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (!isPromotionRelated) {
      return mentionedPromotions;
    }
    
    // T√¨m c√°c khuy·∫øn m√£i ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong ph·∫£n h·ªìi
    promotions.forEach(promotion => {
      // Ki·ªÉm tra t√™n ho·∫∑c m√£ khuy·∫øn m√£i
      if (response.toLowerCase().includes(promotion.name.toLowerCase()) || 
          response.toLowerCase().includes(promotion.code.toLowerCase())) {
        mentionedPromotions.push(promotion);
      }
    });
    
    // N·∫øu ph·∫£n h·ªìi c√≥ ƒë·ªÅ c·∫≠p ƒë·∫øn ShopeeePay, VNPAY ho·∫∑c "h√® 2025" nh∆∞ng kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i c·ª• th·ªÉ
    // th√¨ t√¨m c√°c khuy·∫øn m√£i li√™n quan
    if (mentionedPromotions.length === 0) {
      if (response.toLowerCase().includes('shopeepay')) {
        const shopeepayPromotions = promotions.filter(p => 
          p.name.toLowerCase().includes('shopeepay') || 
          p.code.toLowerCase().includes('shopeepay')
        );
        mentionedPromotions.push(...shopeepayPromotions);
      }
      
      if (response.toLowerCase().includes('vnpay')) {
        const vnpayPromotions = promotions.filter(p => 
          p.name.toLowerCase().includes('vnpay') || 
          p.code.toLowerCase().includes('vnpay')
        );
        mentionedPromotions.push(...vnpayPromotions);
      }
      
      if (response.toLowerCase().includes('h√® 2025') || response.toLowerCase().includes('summer')) {
        const summerPromotions = promotions.filter(p => 
          p.name.toLowerCase().includes('h√®') || 
          p.name.toLowerCase().includes('summer') ||
          p.code.toLowerCase().includes('summer')
        );
        mentionedPromotions.push(...summerPromotions);
      }
    }
    
    return mentionedPromotions;
  };

  // Th√™m h√†m ph√°t hi·ªán r·∫°p chi·∫øu trong ph·∫£n h·ªìi
  const detectTheatersInResponse = (response: string, theaters: Theater[]) => {
    const mentionedTheaters: Theater[] = [];
    const mentionedTheaterIds = new Set<string>();
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ phim ho·∫∑c khuy·∫øn m√£i kh√¥ng
    const isAskingAboutMovies = 
      response.toLowerCase().includes('phim ƒëang chi·∫øu') || 
      response.toLowerCase().includes('phim s·∫Øp chi·∫øu') ||
      response.toLowerCase().includes('phim hay') ||
      response.toLowerCase().includes('ƒë·ª£i g√¨ m∆° d√¨') ||
      response.toLowerCase().includes('superman') ||
      response.toLowerCase().includes('h·ªôi nh√≥c qu·∫≠y');
    
    const isAskingAboutPromotions =
      response.toLowerCase().includes('khuy·∫øn m√£i') ||
      response.toLowerCase().includes('∆∞u ƒë√£i') ||
      response.toLowerCase().includes('gi·∫£m gi√°') ||
      response.toLowerCase().includes('voucher');
  
    // N·∫øu ƒëang h·ªèi v·ªÅ phim ho·∫∑c khuy·∫øn m√£i, kh√¥ng hi·ªÉn th·ªã r·∫°p
    if (isAskingAboutMovies || isAskingAboutPromotions) {
      return [];
    }
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ t·∫•t c·∫£ r·∫°p kh√¥ng
    const isAskingAboutAllTheaters = 
      (response.toLowerCase().includes('t·∫•t c·∫£') && response.toLowerCase().includes('r·∫°p')) ||
      (response.toLowerCase().includes('danh s√°ch') && response.toLowerCase().includes('r·∫°p')) ||
      (response.toLowerCase() === 'r·∫°p galaxy cinema') ||
      (response.toLowerCase() === 'galaxy cinema');
    
    // N·∫øu ƒëang h·ªèi v·ªÅ t·∫•t c·∫£ r·∫°p, hi·ªÉn th·ªã t·∫•t c·∫£ r·∫°p
    if (isAskingAboutAllTheaters) {
      // ƒê·∫£m b·∫£o kh√¥ng c√≥ r·∫°p tr√πng l·∫∑p
      const uniqueTheaters: Theater[] = [];
      const uniqueIds = new Set<string>();
      
      theaters.forEach(theater => {
        if (!uniqueIds.has(theater._id)) {
          uniqueTheaters.push(theater);
          uniqueIds.add(theater._id);
        }
      });
      
      return uniqueTheaters; // Tr·∫£ v·ªÅ danh s√°ch r·∫°p kh√¥ng tr√πng l·∫∑p
    }
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang h·ªèi v·ªÅ r·∫°p ·ªü v·ªã tr√≠ c·ª• th·ªÉ kh√¥ng
    const isAskingAboutSpecificLocation = 
      response.toLowerCase().includes('qu·∫≠n') ||
      response.toLowerCase().includes('huy·ªán') ||
      response.toLowerCase().includes('th√†nh ph·ªë') ||
      response.toLowerCase().includes('tp') ||
      response.toLowerCase().includes('ƒë∆∞·ªùng');
    
    // N·∫øu ƒëang h·ªèi v·ªÅ r·∫°p ·ªü v·ªã tr√≠ c·ª• th·ªÉ, t√¨m c√°c r·∫°p ph√π h·ª£p
    if (isAskingAboutSpecificLocation) {
      let foundSpecificTheaters = false;
      
      // T√¨m c√°c r·∫°p c√≥ ƒë·ªãa ch·ªâ ph√π h·ª£p v·ªõi v·ªã tr√≠ ƒë∆∞·ª£c h·ªèi
      theaters.forEach(theater => {
        const address = theater.address.toLowerCase();
        let isMatch = false;
        
        // T√¨m c√°c t·ª´ kh√≥a v·ªã tr√≠ trong c√¢u h·ªèi
        if (response.toLowerCase().includes('qu·∫≠n')) {
          const quanMatch = response.toLowerCase().match(/qu·∫≠n\s+(\d+|[a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]+)/i);
          if (quanMatch && address.includes(quanMatch[0])) {
            isMatch = true;
          }
        } else if (response.toLowerCase().includes('huy·ªán')) {
          const huyenMatch = response.toLowerCase().match(/huy·ªán\s+([a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]+)/i);
          if (huyenMatch && address.includes(huyenMatch[0])) {
            isMatch = true;
          }
        } else if (response.toLowerCase().includes('ƒë∆∞·ªùng')) {
          const duongMatch = response.toLowerCase().match(/ƒë∆∞·ªùng\s+([a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë\d]+)/i);
          if (duongMatch && address.includes(duongMatch[0])) {
            isMatch = true;
          }
        }
        
        // Ki·ªÉm tra c√°c qu·∫≠n c·ª• th·ªÉ
        for (let i = 1; i <= 12; i++) {
          if (response.toLowerCase().includes(`qu·∫≠n ${i}`) && address.includes(`qu·∫≠n ${i}`)) {
            isMatch = true;
            break;
          }
        }
        
        // Ki·ªÉm tra c√°c qu·∫≠n c√≥ t√™n
        const namedDistricts = ['th·ªß ƒë·ª©c', 'b√¨nh th·∫°nh', 'g√≤ v·∫•p', 'ph√∫ nhu·∫≠n', 't√¢n b√¨nh', 't√¢n ph√∫', 'b√¨nh t√¢n'];
        for (const district of namedDistricts) {
          if (response.toLowerCase().includes(district) && address.includes(district)) {
            isMatch = true;
            break;
          }
        }
        
        // N·∫øu r·∫°p ph√π h·ª£p v√† ch∆∞a ƒë∆∞·ª£c th√™m v√†o danh s√°ch
        if (isMatch && !mentionedTheaterIds.has(theater._id)) {
          mentionedTheaters.push(theater);
          mentionedTheaterIds.add(theater._id);
          foundSpecificTheaters = true;
        }
      });
      
      // N·∫øu t√¨m th·∫•y r·∫°p ph√π h·ª£p, ch·ªâ tr·∫£ v·ªÅ nh·ªØng r·∫°p ƒë√≥
      if (foundSpecificTheaters) {
        return mentionedTheaters;
      }
    }
    
    // N·∫øu kh√¥ng, ch·ªâ hi·ªÉn th·ªã r·∫°p ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p c·ª• th·ªÉ
    theaters.forEach(theater => {
      if (response.toLowerCase().includes(theater.name.toLowerCase()) && !mentionedTheaterIds.has(theater._id)) {
        mentionedTheaters.push(theater);
        mentionedTheaterIds.add(theater._id);
      }
    });
    
    // N·∫øu kh√¥ng t√¨m th·∫•y r·∫°p n√†o c·ª• th·ªÉ, tr·∫£ v·ªÅ danh s√°ch r·ªóng ƒë·ªÉ tr√°nh hi·ªÉn th·ªã r·∫°p kh√¥ng li√™n quan
    return mentionedTheaters;
  };

  // Th√™m h√†m ph√°t hi·ªán l·ªãch chi·∫øu trong ph·∫£n h·ªìi
  const detectScreeningsInResponse = (response: string, screenings: any[], movies: Movie[], theaters: Theater[]) => {
    const mentionedScreenings: any[] = [];
    
    // Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ li√™n quan ƒë·∫øn l·ªãch chi·∫øu kh√¥ng
    const screeningRelatedKeywords = [
      'l·ªãch chi·∫øu', 'su·∫•t chi·∫øu', 'xu·∫•t chi·∫øu', 'gi·ªù chi·∫øu', 'xem phim l√∫c',
      's√°ng', 'tr∆∞a', 'chi·ªÅu', 't·ªëi', 'gi·ªù xem'
    ];
    
    const isScreeningRelated = screeningRelatedKeywords.some(keyword => 
      response.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (!isScreeningRelated) {
      return mentionedScreenings;
    }
    
    // N·∫øu c√≥ ƒë·ªÅ c·∫≠p ƒë·∫øn l·ªãch chi·∫øu, th√™m 2-3 su·∫•t chi·∫øu g·∫ßn nh·∫•t
    const now = new Date();
    const upcomingScreenings = screenings
      .filter(screening => new Date(screening.startTime) > now)
      .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime())
      .slice(0, 6);
    
    // Th√™m log ƒë·ªÉ xem t·ªïng s·ªë su·∫•t chi·∫øu
    const totalAvailableScreenings = screenings.filter(screening => new Date(screening.startTime) > now).length;
    console.log(`T·ªïng s·ªë su·∫•t chi·∫øu c√≥ s·∫µn: ${totalAvailableScreenings}`);

    // L√†m phong ph√∫ d·ªØ li·ªáu su·∫•t chi·∫øu v·ªõi th√¥ng tin phim v√† r·∫°p
    for (const screening of upcomingScreenings) {
      // ƒê·∫£m b·∫£o c√≥ th√¥ng tin phim v√† r·∫°p
      if (!screening.movieTitle && screening.movieId) {
        try {
          const movieId = typeof screening.movieId === 'object' ? screening.movieId._id : screening.movieId;
          const movie = movies.find(m => m._id === movieId);
          if (movie) {
            screening.movieTitle = movie.title;
          }
        } catch (error) {
          screening.movieTitle = 'Phim ch∆∞a x√°c ƒë·ªãnh';
        }
      }
      
      if (!screening.theaterName && screening.theaterId) {
        try {
          const theaterId = typeof screening.theaterId === 'object' ? screening.theaterId._id : screening.theaterId;
          const theater = theaters.find(t => t._id === theaterId);
          if (theater) {
            screening.theaterName = theater.name;
          }
        } catch (error) {
          screening.theaterName = 'R·∫°p ch∆∞a x√°c ƒë·ªãnh';
        }
      }
      
      mentionedScreenings.push(screening);
    }
    
    return mentionedScreenings;
  };

  // ƒê·ªãnh d·∫°ng th·ªùi gian
  const formatTime = (date: Date) => {
    return `${date.getHours().toString().padStart(2, '0')}:${date
      .getMinutes()
      .toString()
      .padStart(2, '0')}`;
  };

  // Component hi·ªÉn th·ªã ng√†y
  const DateHeader = ({ date }: { date: string }) => {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const isToday = date.split('/')[0] == today.getDate().toString() && 
                    date.split('/')[1] == (today.getMonth() + 1).toString() && 
                    date.split('/')[2] == today.getFullYear().toString();
    
    const isYesterday = date.split('/')[0] == yesterday.getDate().toString() && 
                        date.split('/')[1] == (yesterday.getMonth() + 1).toString() && 
                        date.split('/')[2] == yesterday.getFullYear().toString();
    
    let displayText = date;
    if (isToday) displayText = "H√¥m nay";
    if (isYesterday) displayText = "H√¥m qua";
    
    return (
      <View style={styles.dateHeaderContainer}>
        <View style={styles.dateLine} />
        <Text style={styles.dateText}>{displayText}</Text>
        <View style={styles.dateLine} />
      </View>
    );
  };

  // Component hi·ªÉn th·ªã phim ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
  const MoviePreview = ({ movie }: { movie: Movie }) => {
    const [isPressed, setIsPressed] = useState(false);
    
    return (
      <View style={styles.moviePreview}>
        <TouchableOpacity 
          style={[styles.movieMainContent, isPressed && styles.movieMainContentPressed]}
          onPress={() => router.push({
            pathname: '/movie-detail',
            params: { movieId: movie._id }
          })}
          onPressIn={() => setIsPressed(true)}
          onPressOut={() => setIsPressed(false)}
          activeOpacity={0.7}
        >
          <Image 
            source={{ uri: movie.posterUrl }} 
            style={styles.movieImage}
            resizeMode="cover"
          />
          <View style={styles.movieInfo}>
            <Text style={styles.movieName} numberOfLines={1}>
              {movie.title}
            </Text>
            <Text style={styles.movieGenre}>
              {movie.genre}
            </Text>
            <Text style={styles.movieDuration}>
              {movie.duration} ph√∫t
            </Text>
        </View>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.detailButton}
          onPress={() => router.push({
            pathname: '/movie-detail',
            params: { movieId: movie._id }
          })}
          activeOpacity={0.8}
        >
          <Text style={styles.detailButtonText}>Xem chi ti·∫øt</Text>
          <Film size={16} color="#FFD700" />
        </TouchableOpacity>
      </View>
    );
  };

  // Th√™m component hi·ªÉn th·ªã khuy·∫øn m√£i
  const PromotionPreview = ({ promotion }: { promotion: Promotion }) => {
    const [isPressed, setIsPressed] = useState(false);
    
    const formatValue = (type: string, value: number) => {
      return type === 'percent' ? `${value}%` : `${value.toLocaleString('vi-VN')}ƒë`;
    };
    
    const formatDate = (dateString: string) => {
      const date = new Date(dateString);
      return date.toLocaleDateString('vi-VN');
    };
    
    // X·ª≠ l√Ω khi kh√¥ng c√≥ poster
    const defaultPosterUrl = 'https://galaxycine.vn/media/2019/5/6/galaxy-cinema-logo_1557130959296.jpg';
    
    return (
      <View style={styles.promotionPreview}>
        <TouchableOpacity 
          style={[styles.promotionMainContent, isPressed && styles.promotionMainContentPressed]}
          onPress={() => router.push('/offers')}
          onPressIn={() => setIsPressed(true)}
          onPressOut={() => setIsPressed(false)}
          activeOpacity={0.7}
        >
          <Image 
            source={{ uri: promotion.posterUrl || defaultPosterUrl }} 
            style={styles.promotionImage}
            resizeMode="cover"
          />
          <View style={styles.promotionInfo}>
            <Text style={styles.promotionName} numberOfLines={1}>
              {promotion.name}
            </Text>
            <Text style={styles.promotionCode}>
              M√£: {promotion.code}
            </Text>
            <Text style={styles.promotionValue}>
              Gi·∫£m {formatValue(promotion.type, promotion.value)}
            </Text>
            <Text style={styles.promotionDate}>
              H·∫øt h·∫°n: {formatDate(promotion.endDate)}
            </Text>
          </View>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.detailButton}
          onPress={() => router.push('/offers')}
          activeOpacity={0.8}
        >
          <Text style={styles.detailButtonText}>Xem chi ti·∫øt</Text>
          <Gift size={16} color="#FFD700" />
        </TouchableOpacity>
      </View>
    );
  };

  // Th√™m component hi·ªÉn th·ªã r·∫°p chi·∫øu
  const TheaterPreview = ({ theater }: { theater: Theater }) => {
    const [isPressed, setIsPressed] = useState(false);
    
    // H√†m l·∫•y h√¨nh ·∫£nh r·∫°p d·ª±a tr√™n t√™n
    const getTheaterImage = (name: string) => {
      if (name.includes('Nguy·ªÖn VƒÉn Qu√°')) return nguyen_van_qua;
      if (name.includes('Tr∆∞·ªùng Chinh')) return truong_chinh;
      if (name.includes('Hu·ª≥nh T·∫•n Ph√°t')) return huynh_tan_phat;
      if (name.includes('Trung Ch√°nh')) return trung_chanh;
      if (name.includes('Nguy·ªÖn Du')) return nguyen_du;
      if (name.includes('Thiso Mall')) return thiso_mall;
      // H√¨nh ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
      return nguyen_van_qua; 
    };
    
    return (
      <View style={styles.theaterPreview}>
        <TouchableOpacity 
          style={[styles.theaterMainContent, isPressed && styles.theaterMainContentPressed]}
          onPress={() => router.push({
            pathname: '/theater-detail',
            params: { theaterId: theater._id }
          })}
          onPressIn={() => setIsPressed(true)}
          onPressOut={() => setIsPressed(false)}
          activeOpacity={0.7}
        >
          <View style={styles.theaterImageContainer}>
            <Image 
              source={getTheaterImage(theater.name)} 
              style={styles.theaterImage}
              resizeMode="cover"
            />
          </View>
          <View style={styles.theaterInfo}>
            <Text style={styles.theaterName} numberOfLines={1}>
              {theater.name}
            </Text>
            <Text style={styles.theaterAddress} numberOfLines={2}>
              {theater.address}
            </Text>
            <Text style={styles.theaterContact}>
              {theater.phone}
            </Text>
          </View>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.detailButton}
          onPress={() => router.push({
            pathname: '/theater-detail',
            params: { theaterId: theater._id }
          })}
          activeOpacity={0.8}
        >
          <Text style={styles.detailButtonText}>Xem chi ti·∫øt</Text>
          <MapPin size={16} color="#FFD700" />
        </TouchableOpacity>
      </View>
    );
  };

  // Th√™m component hi·ªÉn th·ªã l·ªãch chi·∫øu
  const ScreeningPreview = ({ screening }: { screening: any }) => {
    const [isPressed, setIsPressed] = useState(false);
    
    // Format th·ªùi gian
    const formatTime = (dateTimeString: string) => {
      if (!dateTimeString) return '';
      try {
        const date = new Date(dateTimeString);
        return date.toLocaleTimeString('vi-VN', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        });
      } catch (error) {
        return dateTimeString.slice(11, 16);
      }
    };

    // Format ng√†y
    const formatDate = (dateTimeString: string) => {
      if (!dateTimeString) return '';
      try {
        const date = new Date(dateTimeString);
        return date.toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
      } catch (error) {
        return dateTimeString.slice(0, 10);
      }
    };
    
    return (
      <View style={styles.screeningPreview}>
        <TouchableOpacity 
          style={[styles.screeningMainContent, isPressed && styles.screeningMainContentPressed]}
          onPress={() => router.push({
            pathname: '/seat-selection',
            params: { screeningId: screening._id }
          })}
          onPressIn={() => setIsPressed(true)}
          onPressOut={() => setIsPressed(false)}
          activeOpacity={0.7}
        >
          <View style={styles.screeningInfo}>
            <Text style={styles.screeningMovie} numberOfLines={1}>
              {screening.movieTitle || 'Phim ch∆∞a x√°c ƒë·ªãnh'}
            </Text>
            <Text style={styles.screeningTheater}>
              {screening.theaterName || 'R·∫°p ch∆∞a x√°c ƒë·ªãnh'}
            </Text>
            <View style={styles.screeningTimeContainer}>
              <Text style={styles.screeningDate}>
                {formatDate(screening.startTime)}
              </Text>
              <Text style={styles.screeningTime}>
                {formatTime(screening.startTime)}
              </Text>
            </View>
            <Text style={styles.screeningPrice}>
              {screening.price || screening.ticketPrice || 90000} VNƒê
            </Text>
          </View>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.bookingButton}
          onPress={() => router.push({
            pathname: '/seat-selection',
            params: { screeningId: screening._id }
          })}
          activeOpacity={0.8}
        >
          <Text style={styles.bookingButtonText}>Ch·ªçn gh·∫ø ngay</Text>
          <Ticket size={16} color="#FFD700" />
        </TouchableOpacity>
      </View>
    );
  };

  // H√†m x·ª≠ l√Ω clear chat
  const handleClearChat = () => {
    // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
    Alert.alert(
      "T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi",
      "B·∫°n c√≥ mu·ªën t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi kh√¥ng? T·∫•t c·∫£ tin nh·∫Øn hi·ªán t·∫°i s·∫Ω b·ªã x√≥a.",
      [
        {
          text: "H·ªßy",
          style: "cancel"
        },
        { 
          text: "T·∫°o m·ªõi", 
          onPress: () => {
            // ƒê·∫∑t l·∫°i tin nh·∫Øn v·ªÅ tin nh·∫Øn ch√†o ban ƒë·∫ßu
            setMessages([{
              id: Date.now().toString(),
              text: "Xin ch√†o! T√¥i l√† Galaxy AI, tr·ª£ l√Ω ·∫£o c·ªßa Galaxy Cinema. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
              isUser: false,
              timestamp: new Date(),
            }]);
          },
          style: "default"
        }
      ]
    );
  };

  // Th√™m h√†m x·ª≠ l√Ω quick reply
  const handleQuickReply = (text: string) => {
    setInputText(text);
    handleSend();
  };

  // Thay th·∫ø component QuickReplies hi·ªán t·∫°i b·∫±ng phi√™n b·∫£n m·ªõi
  const QuickReplies = () => {
    // Chia m·∫£ng quickReplies th√†nh 2 h√†ng
    const firstRow = quickReplies.slice(0, 3);
    const secondRow = quickReplies.slice(3);

    return (
      <View style={styles.quickRepliesContainer}>
        <View style={styles.quickRepliesRow}>
          {firstRow.map((reply, index) => (
            <TouchableOpacity
              key={index}
              style={[
                styles.quickReplyButton,
                index === 0 && {
                  shadowColor: "#FFD700",
                  shadowOffset: { width: 0, height: 0 },
                  shadowOpacity: 0.5,
                  shadowRadius: 5,
                  elevation: 5
                }
              ]}
              onPress={reply.onPress}
            >
              {reply.icon}
              <Text style={styles.quickReplyText}>{reply.text}</Text>
            </TouchableOpacity>
          ))}
        </View>
        <View style={styles.quickRepliesRow}>
          {secondRow.map((reply, index) => (
            <TouchableOpacity
              key={index + 3}
              style={styles.quickReplyButton}
              onPress={reply.onPress}
            >
              {reply.icon}
              <Text style={styles.quickReplyText}>{reply.text}</Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar backgroundColor="#000" barStyle="light-content" />
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      keyboardVerticalOffset={100}
    >
        <RNAnimated.View style={[styles.header, { opacity: fadeAnim }]}>
          <View style={styles.headerContent}>
            <View style={styles.botAvatarContainer}>
              <View style={styles.botAvatarCircle}>
                <Bot size={24} color="#FFD700" />
              </View>
              <View style={styles.statusIndicator} />
            </View>
            <View style={styles.headerTextContainer}>
        <Text style={styles.headerTitle}>Galaxy AI Assistant</Text>
              <Text style={styles.headerSubtitle}>Online ‚Ä¢ Tr·∫£ l·ªùi ngay l·∫≠p t·ª©c</Text>
      </View>
            <TouchableOpacity 
              style={styles.clearChatButton}
              onPress={handleClearChat}
            >
              <PlusCircle size={20} color="#FFD700" />
            </TouchableOpacity>
          </View>
        </RNAnimated.View>

      <FlatList
        ref={flatListRef}
          data={groupMessagesByDate()}
        keyExtractor={(item) => item.id}
          renderItem={({ item: group }) => (
            <View>
              <DateHeader date={group.title} />
              {group.data.map((message: Message, messageIndex: number) => (
                <Animated.View 
                  key={`${message.id}-${messageIndex}`}
                  entering={message.isUser ? FadeInRight : FadeInLeft}
                  style={[
                    styles.messageContainer,
                    message.isUser ? styles.userMessage : styles.botMessage,
                  ]}
                >
                  {!message.isUser && (
                    <View style={styles.botAvatar}>
                      <Bot size={20} color="#FFD700" />
                    </View>
                  )}
                  <View
                    style={[
                      styles.messageBubble,
                      message.isUser ? styles.userBubble : styles.botBubble,
                    ]}
                  >
                    <Text style={message.isUser ? styles.userMessageText : styles.botMessageText}>
                      {message.text}
                    </Text>
                    
                    {/* Hi·ªÉn th·ªã phim ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p */}
                    {!message.isUser && message.mentionedMovies?.length && message.mentionedMovies?.length > 0 && (
                      <View style={styles.moviesContainer}>
                        {Array.from(new Set(message.mentionedMovies?.map(movie => movie.title))).map(title => {
                          // L·∫•y phim ƒë·∫ßu ti√™n c√≥ t√™n n√†y
                          const movie = message.mentionedMovies?.find(m => m.title === title);
                          return movie ? <MoviePreview key={movie._id} movie={movie} /> : null;
                        })}
                      </View>
                    )}
                      
                    {/* Hi·ªÉn th·ªã khuy·∫øn m√£i ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p */}
                    {!message.isUser && message.mentionedPromotions && message.mentionedPromotions.length > 0 && (
                      <View style={styles.promotionsContainer}>
                        {/* Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c khuy·∫øn m√£i, kh√¥ng l·ªçc tr√πng l·∫∑p */}
                        {message.mentionedPromotions.map((promotion, index) => (
                          <PromotionPreview key={`${promotion._id}-${index}`} promotion={promotion} />
                        ))}
                      </View>
                    )}

                    {/* Hi·ªÉn th·ªã r·∫°p chi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ch·ªâ khi kh√¥ng c√≥ c·∫£ phim v√† r·∫°p */}
                    {!message.isUser && message.mentionedTheaters?.length && message.mentionedTheaters?.length > 0 && (
                      <View style={styles.theatersContainer}>
                        {Array.from(new Set(message.mentionedTheaters?.map(theater => theater._id)))
                          .map(id => {
                            const theater = message.mentionedTheaters?.find(t => t._id === id);
                            return theater ? <TheaterPreview key={id} theater={theater} /> : null;
                          })}
                      </View>
                    )}

                    {/* Hi·ªÉn th·ªã l·ªãch chi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p */}
                    {!message.isUser && message.mentionedScreenings && message.mentionedScreenings.length > 0 && (
                      <View style={styles.screeningsContainer}>
                        {message.mentionedScreenings.map((screening) => (
                          <ScreeningPreview key={screening._id} screening={screening} />
                        ))}
                      </View>
                    )}
                  </View>
                  <Text style={styles.timestamp}>{formatTime(message.timestamp)}</Text>
                </Animated.View>
              ))}
            </View>
          )}
        style={styles.messagesList}
        contentContainerStyle={styles.messagesContent}
          removeClippedSubviews={true}  // Add this to improve performance
      />

      {isTyping && (
        <View style={styles.typingIndicator}>
            <View style={styles.botAvatarSmall}>
              <Bot size={16} color="#FFD700" />
            </View>
            <ActivityIndicator size="small" color="#FFD700" style={styles.typingDots} />
          <Text style={styles.typingText}>Galaxy AI ƒëang nh·∫≠p</Text>
        </View>
      )}

        <View>
          <QuickReplies />
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          value={inputText}
          onChangeText={setInputText}
          placeholder="Nh·∫≠p tin nh·∫Øn..."
          placeholderTextColor="#666"
          multiline
              maxLength={500}  // Add a reasonable max length
        />
        <TouchableOpacity
          style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
          onPress={handleSend}
          disabled={!inputText.trim()}
        >
          <Send size={20} color={inputText.trim() ? '#000000' : '#666'} />
        </TouchableOpacity>
          </View>
      </View>
    </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#000',
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0
  },
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  header: {
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#222',
    backgroundColor: '#000000',
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  botAvatarContainer: {
    position: 'relative',
    marginRight: 12,
  },
  botAvatarCircle: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#1A1A1A',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#333',
  },
  statusIndicator: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#4CAF50',
    borderWidth: 2,
    borderColor: '#000',
  },
  headerTitle: {
    fontFamily: 'PlayfairDisplay-Bold',
    fontSize: 18,
    color: '#FFD700',
  },
  headerSubtitle: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#aaa',
  },
  messagesList: {
    flex: 1,
  },
  messagesContent: {
    padding: 16,
    paddingBottom: 20,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 16,
    maxWidth: '80%',
  },
  userMessage: {
    alignSelf: 'flex-end',
  },
  botMessage: {
    alignSelf: 'flex-start',
  },
  botAvatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#1A1A1A',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#FFD700',
  },
  botAvatarSmall: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: '#1A1A1A',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#FFD700',
  },
  messageBubble: {
    padding: 12,
    borderRadius: 16,
    maxWidth: '100%',
  },
  userBubble: {
    backgroundColor: '#1A1A1A',
    borderTopRightRadius: 4,
    borderWidth: 1,
    borderColor: '#FFD700',
  },
  botBubble: {
    backgroundColor: '#1A1A1A',
    borderTopLeftRadius: 4,
    borderWidth: 1,
    borderColor: '#333',
  },
  messageText: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 14,
    lineHeight: 20,
  },
  userMessageText: {
    color: '#FFFFFF',
  },
  botMessageText: {
    color: '#FFD700',
  },
  timestamp: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 10,
    color: '#999',
    alignSelf: 'flex-end',
    marginTop: 4,
  },
  typingIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    marginLeft: 16,
    marginBottom: 8,
  },
  typingDots: {
    marginRight: 8,
  },
  typingText: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#999',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#333',
    alignItems: 'center',
  },
  input: {
    flex: 1,
    backgroundColor: '#1A1A1A',
    borderRadius: 24,
    paddingHorizontal: 16,
    paddingVertical: 12,
    color: '#FFFFFF',
    fontFamily: 'Montserrat-Regular',
    fontSize: 14,
    maxHeight: 100,
    borderWidth: 1,
    borderColor: '#333',
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#FFD700',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
    shadowColor: '#FFD700',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
    elevation: 5,
  },
  sendButtonDisabled: {
    backgroundColor: '#333',
  },
  dateHeaderContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  dateLine: {
    flex: 1,
    height: 1,
    backgroundColor: '#333',
  },
  dateText: {
    fontSize: 12,
    color: '#FFD700',
    marginHorizontal: 10,
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#1A1A1A',
    borderRadius: 10,
    overflow: 'hidden',
    fontFamily: 'Montserrat-Medium',
  },
  moviesContainer: {
    marginTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#333',
    paddingTop: 10,
  },
  moviePreview: {
    flexDirection: 'column',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    marginVertical: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333',
  },
  movieMainContent: {
    flexDirection: 'row',
    padding: 10,
    alignItems: 'center',
  },
  movieMainContentPressed: {
    backgroundColor: '#222',
  },
  movieImage: {
    width: 60,
    height: 90,
    borderRadius: 6,
    backgroundColor: '#222',
  },
  movieInfo: {
    flex: 1,
    marginLeft: 10,
  },
  movieName: {
    fontFamily: 'Montserrat-SemiBold',
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 4,
  },
  movieGenre: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#999',
    marginBottom: 4,
  },
  movieDuration: {
    fontFamily: 'Montserrat-Medium',
    fontSize: 12,
    color: '#FFD700',
  },
  detailButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#000',
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  detailButtonText: {
    color: '#FFD700',
    fontSize: 12,
    fontFamily: 'Montserrat-SemiBold',
    marginRight: 4,
  },
  promotionsContainer: {
    marginTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#333',
    paddingTop: 10,
  },
  promotionPreview: {
    flexDirection: 'column',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    marginVertical: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333',
  },
  promotionMainContent: {
    flexDirection: 'row',
    padding: 10,
    alignItems: 'center',
  },
  promotionMainContentPressed: {
    backgroundColor: '#222',
  },
  promotionImage: {
    width: 60,
    height: 90,
    borderRadius: 6,
    backgroundColor: '#222',
  },
  promotionInfo: {
    flex: 1,
    marginLeft: 10,
  },
  promotionName: {
    fontFamily: 'Montserrat-SemiBold',
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 4,
  },
  promotionCode: {
    fontFamily: 'Montserrat-Medium',
    fontSize: 12,
    color: '#FFD700',
    marginBottom: 2,
  },
  promotionValue: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#999',
    marginBottom: 2,
  },
  promotionDate: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 11,
    color: '#777',
  },
  theatersContainer: {
    marginTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#333',
    paddingTop: 10,
  },
  theaterPreview: {
    flexDirection: 'column',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    marginVertical: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333',
  },
  theaterMainContent: {
    flexDirection: 'row',
    padding: 10,
    alignItems: 'center',
  },
  theaterMainContentPressed: {
    backgroundColor: '#222',
  },
  theaterImageContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#222',
    justifyContent: 'center',
    alignItems: 'center',
    overflow: 'hidden',
  },
  theaterImage: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  theaterInfo: {
    flex: 1,
    marginLeft: 10,
  },
  theaterName: {
    fontFamily: 'Montserrat-SemiBold',
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 4,
  },
  theaterAddress: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#999',
    marginBottom: 4,
  },
  theaterContact: {
    fontFamily: 'Montserrat-Medium',
    fontSize: 12,
    color: '#FFD700',
  },
  clearChatButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#1A1A1A',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#333',
  },
  headerTextContainer: {
    flex: 1,
  },
  quickRepliesContainer: {
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderTopWidth: 1,
    borderTopColor: '#333',
    backgroundColor: '#0A0A0A',
  },
  quickRepliesRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  quickReplyButton: {
    backgroundColor: '#1A1A1A',
    paddingHorizontal: 8,  // gi·∫£m padding ngang
    paddingVertical: 6,    // gi·∫£m padding d·ªçc
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#FFD700',
    flex: 1,
    marginHorizontal: 3,   // gi·∫£m margin
    alignItems: 'center',
    flexDirection: 'row',  // th√™m ƒë·ªÉ icon v√† text n·∫±m c√πng h√†ng
    justifyContent: 'center',
  },
  quickReplyText: {
    color: '#FFD700',
    fontSize: 11,          // gi·∫£m k√≠ch th∆∞·ªõc font
    fontFamily: 'Montserrat-Medium',
    textAlign: 'center',
    marginLeft: 4,         // t·∫°o kho·∫£ng c√°ch gi·ªØa icon v√† text
  },
  screeningPreview: {
    flexDirection: 'column',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    marginVertical: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333',
  },
  screeningMainContent: {
    padding: 14,
  },
  screeningMainContentPressed: {
    backgroundColor: '#222',
  },
  screeningInfo: {
    paddingVertical: 4,
  },
  screeningMovie: {
    fontFamily: 'Montserrat-Bold',
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 4,
  },
  screeningTheater: {
    fontFamily: 'Montserrat-SemiBold',
    fontSize: 14,
    color: '#FFD700',
    marginBottom: 4,
  },
  screeningTimeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
    gap: 8,
  },
  screeningDate: {
    fontFamily: 'Montserrat-Medium',
    fontSize: 12,
    color: '#FFFFFF',
    backgroundColor: '#333',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  screeningTime: {
    fontFamily: 'Montserrat-Bold',
    fontSize: 14,
    color: '#4CAF50',
  },
  screeningPrice: {
    fontFamily: 'Montserrat-Regular',
    fontSize: 12,
    color: '#999',
  },
  bookingButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#1F1F1F',
    paddingVertical: 10,
    paddingHorizontal: 12,
    borderTopWidth: 1,
    borderTopColor: '#333',
  },
  bookingButtonText: {
    color: '#FFD700',
    fontSize: 14,
    fontFamily: 'Montserrat-SemiBold',
    marginRight: 4,
  },
  screeningsContainer: {
    marginTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#333',
    paddingTop: 10,
  },
});